#!/usr/bin/env python3

import argparse
import struct
import subprocess
import sys

import bs4


def get_html_on_mac():
    # https://stackoverflow.com/a/17217886/99944
    try:
        content = subprocess.check_output(['osascript', '-e', 'the clipboard as "HTML"'])
    except subprocess.CalledProcessError as error:
        sys.stderr.write(
                'Failed to fetch rich clipboard content, falling back to text\n')
        content = subprocess.check_output(['pbpaste']).decode()
        return f'<span>{content}</span>'

    # Strip the HTML headers
    prefix = '«data HTML'.encode()
    assert content.startswith(prefix)
    suffix = '»\n'.encode()
    assert content.endswith(suffix)
    content = content[len(prefix):-len(suffix)]

    # Decode hex ascii
    assert len(content) % 2 == 0
    content = bytes((
            int(content[i:i+2], 16)
            for i in range(0, len(content), 2)))
    content = content.decode()

    return content


def get_html():
    if sys.platform.startswith('linux'):
        # https://superuser.com/a/1614444/44186
        return subprocess.check_output([
            'xclip', '-selection', 'clipboard', '-o', '-t', 'text/html'])
        pass
    elif sys.platform.startswith('darwin'):
        return get_html_on_mac()
    else:
        raise NotImplemented(f'Unsupported platform {sys.platform}')

def markdownify(elements, indent=0):
    out = ''
    for element in elements:
        if type(element) != bs4.Tag:
            out += str(element)
            continue

        if element.name in ('h1', 'h2', 'h3', 'h4', 'h5', 'h6'):
            level = int(element.name[1:])
            if out:
                out += '\n'
            out += '#' * level + ' ' + markdownify(element) + '\n'
        elif element.name == 'p':
            out += '\n' + markdownify(element) + '\n'
        elif element.name == 'ul':
            out += '\n' + markdownify(element, indent=indent+1) + '\n'
        elif element.name == 'li':
            prefix = ' ' * indent + '- '
            out += prefix + markdownify(element) + '\n'
        elif element.name == 'a':
            # Ignore empty links
            if element.text == '':
                continue

            children = list(element.children)
            if len(children) == 1 and type(children[0]) == bs4.NavigableString and element.text == element['href']:
                out += f'<{content}>'
                continue

            out += '[' + markdownify(element) + '](' + element['href'] + ')'
        elif element.name == 'code':
            out += '`' + markdownify(element) + '`'
        elif element.name == 'em':
            out += '_' + markdownify(element) + '_'
        elif element.name in ('b', 'strong'):
            out += '**' + markdownify(element) + '**'
        elif element.name == 'pre':
            content = markdownify(element)
            if content[0] != '\n':
                content = '\n' + content
            if content[-1] != '\n':
                content = content + '\n'
            out += '\n```' + content  + '```\n'
        else:
            out += str(element)

    return out



def to_markdown(content, debug=False):
    bs = bs4.BeautifulSoup(content, features='html.parser')

    if debug:
        sys.stderr.write(f'---- Before cleanup ----\n{bs.prettify()}\n')

    # Initial cleanup
    for element in bs.find_all('meta'):
        element.replace_with('')

    for element in bs.find_all():
        del element['style']
        del element['target']
        del element['class']

    for element in bs.find_all(('span', 'div', 'font')):
        element.replace_with_children()

    # Simplify <pre><code> combo as <pre> only
    for element in bs.find_all('pre'):
        children = list(element.children)
        if len(children) == 1 and children[0].name == 'code':
            children[0].replace_with_children()

    if debug:
        sys.stderr.write(f'---- After cleanup ----\n{bs.prettify()}\n')
        sys.stderr.write(f'----\n')

    return markdownify(bs).strip()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Paste clipboard as markdown')
    parser.add_argument('-d', '--debug', dest='debug', action='store_const', const=True, default=False, help='Show intermediate steps')
    args = parser.parse_args(sys.argv[1:])

    content = get_html()
    print(to_markdown(content, debug=args.debug))
